answers.pdf

Part 1

1 (5pts)
(a) false, f takes T1 not T2 like is the output of g
(b) true, f returns T2 when it gets y:T2
(c) true, if the lambda is called with T1 it will return T2 (we don't need to have any assumption about the type of x in the TEnv on the left side because x is not a free variable.  The type of the bound variable can be inferred through type inference.)
(d) false, T2 is not necessarily a Number

2 (12pts)
(a) success, similar to https://bguppl.github.io/interpreters/practice_sessions/ps7.html#question-1-1
(b) fail, similar to https://bguppl.github.io/interpreters/practice_sessions/ps7.html#question-3-1

Part 2
2.2 (b) (2pts) 
It returns a Promise since the *asynchronous* cache-store lookup prepends the function, making the entire operation asynchronous.
As a consequence, even if the function f is a synchronous function, the memo function that wraps f becomes an asynchronous function,
implemented as a promise.

Part 3
3.1 (a) 4 points for the typing rules / 8 points for implementation of typeofDefine, typeofLit, typeofProgram and typeofSet

Typing rule define:
  For every: type environment _Tenv,
             variable declaration _x1
             expressions _e1 and
             type expressions _S1:
  If _Tenv o {_x1 : _S1} |- _e1 : _S1
  Then _Tenv |- (define _x1 _e1) : void
  
This typing rule allows type inference of recursive functions such as:
(define fact (lambda (n) (if (= n 0) 1 (* n (fact (- n 1))))))

because when we analyze the type of _e1 (the lambda-exp), we do it in a TEnv where fact is bound to type _S1.
Observe that the typing rule enforces exhaustive traversal of the define expression component (the val component).


Typing rule set!:
  For every: type environment _Tenv,
             variable reference _x1
             expressions _e1 and
             type expressions _S1:
  If _Tenv |- _e1 : _S1 and
     _Tenv |- _x1 : _S1
  Then _Tenv |- (set! _x1 _e1) : void
  
In this case as well, the typing rule enforces exhaustive traversal of the set-exp by forcing the analysis of the varRef _x1 and the value _e1.
The set! expression as all expressions that have a side effect in Scheme returns a void value (which has a type void as well).
The typing rule imposes the type of the variable and that of the value to be the same.
